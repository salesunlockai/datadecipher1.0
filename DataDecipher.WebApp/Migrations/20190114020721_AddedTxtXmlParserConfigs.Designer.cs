// <auto-generated />
using System;
using DataDecipher.WebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataDecipher.WebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190114020721_AddedTxtXmlParserConfigs")]
    partial class AddedTxtXmlParserConfigs
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataDecipher.WebApp.Data.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("OrganizationId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PlanId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PlanId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.CsvParserConfig", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Delimiter")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<string>("Details");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("RequiredHeader")
                        .IsRequired();

                    b.Property<string>("Status");

                    b.HasKey("ID");

                    b.HasIndex("CreatedById");

                    b.ToTable("CsvParserConfigs");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.DataProcessingRule", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("MatchCondition")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ReplaceWith");

                    b.HasKey("Id");

                    b.ToTable("DataProcessingRule");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.DataSource", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("TypeId");

                    b.Property<string>("Uri");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TypeId");

                    b.ToTable("DataSources");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.DataSourceConnector", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Extension")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("DataSourceConnectors");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.DataSourceProcessingRule", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DataProcessingRuleId");

                    b.Property<string>("DataSourceId");

                    b.HasKey("Id");

                    b.HasIndex("DataProcessingRuleId");

                    b.HasIndex("DataSourceId");

                    b.ToTable("DataSourceProcessingRule");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.Method", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Methods");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.MethodDataSource", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CsvParserConfigID");

                    b.Property<string>("DatafileId");

                    b.Property<string>("MethodId");

                    b.Property<string>("TxtParserConfigID");

                    b.Property<string>("XmlParserConfigID");

                    b.HasKey("Id");

                    b.HasIndex("CsvParserConfigID");

                    b.HasIndex("DatafileId");

                    b.HasIndex("MethodId");

                    b.HasIndex("TxtParserConfigID");

                    b.HasIndex("XmlParserConfigID");

                    b.ToTable("MethodDataSources");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.Organization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("SelectedPlanId");

                    b.HasKey("Id");

                    b.HasIndex("SelectedPlanId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.Plan", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Price");

                    b.Property<int>("TrialPeriod");

                    b.HasKey("Id");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.PlanDataConnector", b =>
                {
                    b.Property<string>("PlanId");

                    b.Property<string>("DataSourceConnectorId");

                    b.HasKey("PlanId", "DataSourceConnectorId");

                    b.HasIndex("DataSourceConnectorId");

                    b.ToTable("PlanDataConnectors");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.SampleDataSource", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("TypeId");

                    b.Property<string>("Uri");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TypeId");

                    b.ToTable("SampleDataSources");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.SharedMethod", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanEdit");

                    b.Property<string>("CsvParserConfigID");

                    b.Property<string>("MethodId");

                    b.Property<string>("TxtParserConfigID");

                    b.Property<string>("UserId");

                    b.Property<string>("XmlParserConfigID");

                    b.HasKey("Id");

                    b.HasIndex("CsvParserConfigID");

                    b.HasIndex("MethodId");

                    b.HasIndex("TxtParserConfigID");

                    b.HasIndex("UserId");

                    b.HasIndex("XmlParserConfigID");

                    b.ToTable("SharedMethods");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.TxtParserConfig", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Delimiter")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<string>("Details");

                    b.Property<string>("HeaderFields");

                    b.Property<string>("HeaderMarkerEnd")
                        .IsRequired();

                    b.Property<string>("HeaderMarkerStart")
                        .IsRequired();

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("RecordMarkerEnd")
                        .IsRequired();

                    b.Property<string>("RecordMarkerStart")
                        .IsRequired();

                    b.Property<string>("Status");

                    b.Property<string>("TableFields");

                    b.Property<string>("TableMarkerEnd");

                    b.Property<string>("TableMarkerStart");

                    b.HasKey("ID");

                    b.HasIndex("CreatedById");

                    b.ToTable("TxtParserConfigs");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.XmlParserConfig", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Details");

                    b.Property<string>("HeaderFields")
                        .IsRequired();

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ParentTag")
                        .IsRequired();

                    b.Property<string>("Status");

                    b.Property<string>("TableFields")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("CreatedById");

                    b.ToTable("XmlParserConfigs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Data.ApplicationUser", b =>
                {
                    b.HasOne("DataDecipher.WebApp.Models.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("DataDecipher.WebApp.Models.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.CsvParserConfig", b =>
                {
                    b.HasOne("DataDecipher.WebApp.Data.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.DataSource", b =>
                {
                    b.HasOne("DataDecipher.WebApp.Data.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataDecipher.WebApp.Models.DataSourceConnector", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.DataSourceProcessingRule", b =>
                {
                    b.HasOne("DataDecipher.WebApp.Models.DataProcessingRule", "Rule")
                        .WithMany("DataSourceProcessingRules")
                        .HasForeignKey("DataProcessingRuleId");

                    b.HasOne("DataDecipher.WebApp.Models.DataSource", "DataSource")
                        .WithMany("DataSourceProcessingRules")
                        .HasForeignKey("DataSourceId");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.Method", b =>
                {
                    b.HasOne("DataDecipher.WebApp.Data.ApplicationUser", "CreatedBy")
                        .WithMany("CreatedMethods")
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.MethodDataSource", b =>
                {
                    b.HasOne("DataDecipher.WebApp.Models.CsvParserConfig")
                        .WithMany("LinkedDataSources")
                        .HasForeignKey("CsvParserConfigID");

                    b.HasOne("DataDecipher.WebApp.Models.DataSource", "Datafile")
                        .WithMany()
                        .HasForeignKey("DatafileId");

                    b.HasOne("DataDecipher.WebApp.Models.Method", "Method")
                        .WithMany("LinkedDataSources")
                        .HasForeignKey("MethodId");

                    b.HasOne("DataDecipher.WebApp.Models.TxtParserConfig")
                        .WithMany("LinkedDataSources")
                        .HasForeignKey("TxtParserConfigID");

                    b.HasOne("DataDecipher.WebApp.Models.XmlParserConfig")
                        .WithMany("LinkedDataSources")
                        .HasForeignKey("XmlParserConfigID");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.Organization", b =>
                {
                    b.HasOne("DataDecipher.WebApp.Models.Plan", "SelectedPlan")
                        .WithMany("Organizations")
                        .HasForeignKey("SelectedPlanId");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.PlanDataConnector", b =>
                {
                    b.HasOne("DataDecipher.WebApp.Models.DataSourceConnector", "DataSourceConnector")
                        .WithMany("Plans")
                        .HasForeignKey("DataSourceConnectorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataDecipher.WebApp.Models.Plan", "Plan")
                        .WithMany("EnabledDataConnectors")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.SampleDataSource", b =>
                {
                    b.HasOne("DataDecipher.WebApp.Data.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataDecipher.WebApp.Models.DataSourceConnector", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.SharedMethod", b =>
                {
                    b.HasOne("DataDecipher.WebApp.Models.CsvParserConfig")
                        .WithMany("SharedUsers")
                        .HasForeignKey("CsvParserConfigID");

                    b.HasOne("DataDecipher.WebApp.Models.Method", "Method")
                        .WithMany("SharedUsers")
                        .HasForeignKey("MethodId");

                    b.HasOne("DataDecipher.WebApp.Models.TxtParserConfig")
                        .WithMany("SharedUsers")
                        .HasForeignKey("TxtParserConfigID");

                    b.HasOne("DataDecipher.WebApp.Data.ApplicationUser", "User")
                        .WithMany("SharedMethods")
                        .HasForeignKey("UserId");

                    b.HasOne("DataDecipher.WebApp.Models.XmlParserConfig")
                        .WithMany("SharedUsers")
                        .HasForeignKey("XmlParserConfigID");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.TxtParserConfig", b =>
                {
                    b.HasOne("DataDecipher.WebApp.Data.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DataDecipher.WebApp.Models.XmlParserConfig", b =>
                {
                    b.HasOne("DataDecipher.WebApp.Data.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DataDecipher.WebApp.Data.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataDecipher.WebApp.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataDecipher.WebApp.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DataDecipher.WebApp.Data.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataDecipher.WebApp.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataDecipher.WebApp.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
