@model DataDecipher.WebApp.Models.MainViewModel
@{
    ViewData["Title"] = "Main Page";
    Layout = "_MainLayout";
}
<div class="container-fluid">
    <h5>Welcome to Data Decipher</h5>
    <p>Use instructions below to quickly obtain insights from your data and generate reports</p>
    <br/>
    <div id="SetMethod">
        @await Html.PartialAsync("~/Views/Main/_SetMethod.cshtml")
    </div>
    <div id="SetDataSource">
    </div>
    <div id="DisplayDataSource">
    </div>
    <div id="ApplyRules">
    </div>
    <div id="DisplayProcessedData">
    </div>
    <div id="SetParser">
    </div>
    <div id="ShowParsedData">
    </div>
</div>
@*@using DataDecipher.WebApp.Data
@inject ApplicationDbContext ctx
`<div class="container-fluid">
    <h5>Welcome to Data Decipher</h5>
    <p>Use instructions below to quickly obtain insights from your data and generate reports</p>

        <div class="row>">
            <div class="col-md-12">
                <h6>1. Set your method</h6>
                <br />
            </div>
        </div>
        <div class="row>">
            <div class="col-md-4">
                <h6>1. Set your method</h6>
                @await Html.PartialAsync("~/Views/Method/_NewMethod.cshtml", Model.MethodViewModel)
            </div>
            <div class="col-md-4">
                <h6>1. Set your method</h6>
                @await Html.PartialAsync("~/Views/Methods/_ListMethods.cshtml")
            </div>
        </div>
    
</div>*@

@*<div id="datasource" class="section">
    <div class="container-fluid">
        <div class="row>">
            <div class=col-md-4>
                <h6>2. Set datasource</h6>
                <br />
                <p>Select files from your computer: </p>
                <div class="form-group">
                    <input type="file" class="file btn btn-primary btn-simple" id="uploadSourceFiles" accept=".csv,.txt,.dat,.xml" multiple>
                </div>
                <label for="sourceFolderPath">Folder Path: </label>
                <div class="input-group form-group-no-border input-lg">
                    <span class="input-group-addon">
                        <i class="now-ui-icons text_caps-small"></i>
                    </span>
                    <input type="text" id="sourceFolderPath" name="sourceFolderPath" placeholder="Please enter the folder path" class="form-control" />
                </div>
                <br />
                <div class="input-group form-group-no-border input-lg">
                    <input type="button" id="submitSourceFiles" onclick="updateSourceFileList()" value="Submit files" class="btn btn-primary btn-round" />
                </div>
            </div>
        </div>
        @*<div class="row>">
                <div class=col-md-4>
                    <br />
                    <p>Or drag and drop files below</p>
                    <div class="upload-drop-zone" id="drop-zone">
                        Just drag and drop files here
                    </div>
                </div>
            </div>
            <div class="row>">
                <div class=col-md-4>
                    <br />
                    <p>Or Select from existing datasources</p>
                </div>
            </div>
    </div>
</div>
<div id="instrument" class="section">
    <div class="container-fluid">
        <div class="row>">
            <div class=col-md-10>
                <h6>3. Set instrument configuration</h6>
                <br />
                <label for="fileList">File:  </label>
                <select id="fileList" onChange="storeRawFileSelection(this);"></select>
                <br />
                <input type="text" id="inputSelectedFile" hidden />
                <input type="button" id="showRawData" value="Show Raw Data" class="btn btn-primary btn-round" />
                <br />
                <div id="divRawDataContainer">
                </div>
            </div>
        </div>
    </div>
</div>
<div id="rule" class="section">
    <div class="container-fluid">
        <div class="row>">
            <div class=col-md-10>
                <h6>4. Apply processing rule</h6>
                <br />
                <p>Choose the data processing rules to clean the raw data</p>
            </div>
        </div>
        @await Html.PartialAsync("~/Views/DataProcessingRules/_ListProcessingRules.cshtml", ctx.DataProcessingRule.ToList());
    </div>
</div>
<div id="parser" class="section">
    <div class="container-fluid">
        <div class="row>">
            <div class=col-md-10>
                <h6>5. Set parser configuration</h6>
                <br />
                <div id="parsingRules">
                </div>
                <br />
            </div>
        </div>
    </div>
</div>
<div id="report" class="section">
    <div class="container-fluid">
        <div class="row>">
            <div class=col-md-10>
                <h6>6. Set reporting configuration</h6>
                <br />
                <div id="divParsedDataContainer">
                </div>
            </div>
        </div>
    </div>
<<<<<<< Updated upstream
</div>*@

<script type="text/javascript">function storeRawFileSelection(sel) {
=======
</div>
<script type="text/javascript">
function storeRawFileSelection(sel) {
>>>>>>> Stashed changes
        $('#inputSelectedFile').val(sel.options[sel.selectedIndex].text);
        fullFilePath = sel.options[sel.selectedIndex].text;
        fileExtension = fullFilePath.replace(/^.*\./, '');
        switch (fileExtension) {
            case 'txt': case 'dat':
                $.ajax({
                    url: '/Main/DisplayParsingViewTxtDat',
                    type: 'POST',
                    datatype: 'text',
                    contentType: 'application/x-www-form-urlencoded',
                    data: { filePath: fullFilePath },
                    success: function(content) {
                        $('#parsingRules').html(content);
                    },
                    error: function(e) { }
                });
                break;
            case 'csv':
                $.ajax({
                    url: '/Main/DisplayParsingViewCsv',
                    type: 'POST',
                    datatype: 'text',
                    contentType: 'application/x-www-form-urlencoded',
                    data: { filePath: fullFilePath },
                    success: function(content) {
                        $('#parsingRules').html(content);
                    },
                    error: function(e) { }
                });
                break;
            case 'xml':
                $.ajax({
                    url: '/Main/DisplayParsingViewXml',
                    type: 'POST',
                    datatype: 'text',
                    contentType: 'application/x-www-form-urlencoded',
                    data: { filePath: fullFilePath },
                    success: function(content) {
                        $('#parsingRules').html(content);
                    },
                    error: function(e) { }
                });
                break;
            default:
                x.innerhtml = 'none';
        }
}

$(document).ready(function() {
        $('#showRawData').click(function() {
            $.ajax({
                url: '/Main/DisplayRawData',
                type: 'POST',
                datatype: 'text',
                contentType: 'application/x-www-form-urlencoded',
                data: { inputSelectedFile: $('#inputSelectedFile').val() },
                success: function(content) {
                    $('#divRawDataContainer').html(content);
                },
                error: function(e) { }
            });
        });
});

function updateSourceFileList() {
        var sourceFolderPath = document.getElementById("sourceFolderPath").value;
        @*var inputFilelist = document.getElementById("uploadSourceFiles");*@
        var inputFiles = document.getElementById("uploadSourceFiles").files;
        @*var sourceFolderPath = document.getElementById("uploadSourceFiles").value;
        var r = /[^\\]*$/;
        sourceFolderPath = sourceFolderPath.replace(r, '');*@
        var inputFilelistDropDown = document.getElementById("fileList");
        inputFilelistDropDown.options.length = 0;
        if (inputFiles.length != 0) {
            inputFilelistDropDown.options[inputFilelistDropDown.options.length] = new Option("Select a file", 0);

            // loop through files
            for (var i = 0; i < inputFiles.length; i++) {
                var file = inputFiles[i].name;
                @*var filePathName = inputFiles[i].webkitRelativePath;*@
                inputFilelistDropDown.options[inputFilelistDropDown.options.length] = new Option(sourceFolderPath + file, i + 1);
            }
        }
        else {
            inputFilelistDropDown.options[inputFilelistDropDown.options.length] = new Option("Please provide an input data source", 0);
        }
}</script>
