@model DataDecipher.WebApp.Models.Method
@{
    ViewData["Title"] = "Main Page";
    Layout = "_MainLayout";
}
<br />

<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
<link href="https://cdn.quilljs.com/1.1.6/quill.snow.css" rel="stylesheet">
<script src="https://cdn.quilljs.com/1.1.6/quill.js"></script>

<div class="container-fluid">
    <h5>Welcome to Data Decipher</h5>
    <p>Use instructions below to quickly obtain insights from your data and generate reports</p>
</div>
<div id="method" class="container-fluid">
    <div class="row>">
        <div class="col-md-4">
            <h6>1. Define your method</h6>
            <br />
        </div>
    </div>
    @await Html.PartialAsync("~/Views/Method/_NewMethod.cshtml")
</div>
<div id="datasource" class="section">
    <div class="container-fluid">
        <div class="row>">
            <div class=col-md-4>
                <h6>2. Set datasource</h6>
                <br />
                <p>Select files from your computer: </p>
                <div class="form-group">
                    <input type="file" class="file btn btn-primary btn-simple" id="uploadSourceFiles" accept=".csv,.txt,.dat,.xml" multiple>
                </div>
                <label for="sourceFolderPath">Folder Path: </label>
                <div class="input-group form-group-no-border input-lg">
                    <span class="input-group-addon">
                        <i class="now-ui-icons text_caps-small"></i>
                    </span>
                    <input type="text" id="sourceFolderPath" name="sourceFolderPath" placeholder="Please enter the folder path" class="form-control" />
                </div>
                <br />
                <div class="input-group form-group-no-border input-lg">
                    <input type="button" id="submitSourceFiles" onclick="updateSourceFileList()" value="Submit files" class="btn btn-primary btn-round" />
                </div>
            </div>
        </div>
        @*<div class="row>">
            <div class=col-md-4>
                <br />
                <p>Or drag and drop files below</p>
                <div class="upload-drop-zone" id="drop-zone">
                    Just drag and drop files here
                </div>
            </div>
        </div>
        <div class="row>">
            <div class=col-md-4>
                <br />
                <p>Or Select from existing datasources</p>
            </div>
        </div>*@
    </div>
</div>
<div id="instrument" class="section">
    <div class="container-fluid">
        <div class="row>">
            <div class=col-md-10>
                <h6>3. Set instrument configuration</h6>
                <br />
                <label for="fileList">File:  </label>
                <select id="fileList" onChange="storeRawFileSelection(this);">
                </select>
                <br />
                <input type="text" id="inputSelectedFile" hidden />
                <input type="button" id="showRawData" value="Show Raw Data" class="btn btn-primary btn-round" />
                <br />
                <div id="divRawDataContainer">
                </div>
            </div>
        </div>
    </div>
</div>
<div id="parser" class="section">
    <div class="container-fluid">
        <div class="row>">
            <div class=col-md-10>
                <h6>4. Set parser configuration</h6>
                <br />
                <div id="parsingRules">
                </div>
                <br />
            </div>
        </div>
    </div>
</div>
<div id="report" class="section">
    <div class="container-fluid">
        <div class="row>">
            <div class=col-md-10>
                <h6>5. Set reporting configuration</h6>
                <br />
                <div id="divParsedDataContainer">
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

function storeRawFileSelection(sel) {
    $('#inputSelectedFile').val(sel.options[sel.selectedIndex].text);
    fullFilePath = sel.options[sel.selectedIndex].text;
    fileExtension = fullFilePath.replace(/^.*\./, '');
    switch (fileExtension) {
        case 'txt': case 'dat':
            $.ajax({
                url: '/Main/DisplayParsingViewTxtDat',
                type: 'POST',
                datatype: 'text',
                contentType: 'application/x-www-form-urlencoded',
                data: { filePath: fullFilePath },
                success: function(content) {
                    $('#parsingRules').html(content);
                },
            error: function(e) { }
            });
            break;
        case 'csv':
            $.ajax({
                url: '/Main/DisplayParsingViewCsv',
                type: 'POST',
                datatype: 'text',
                contentType: 'application/x-www-form-urlencoded',
                data: { filePath: fullFilePath },
                success: function(content) {
                    $('#parsingRules').html(content);
                },
            error: function(e) { }
            });
            break;
        case 'xml':
            $.ajax({
                url: '/Main/DisplayParsingViewXml',
                type: 'POST',
                datatype: 'text',
                contentType: 'application/x-www-form-urlencoded',
                data: { filePath: fullFilePath },
                success: function(content) {
                    $('#parsingRules').html(content);
                },
            error: function(e) { }
            });
            break;
        default:
            x.innerhtml = 'none';
    }
}

$(document).ready(function() {
    $('#showRawData').click(function() {
        $.ajax({
            url: '/Main/DisplayRawData',
            type: 'POST',
            datatype: 'text',
            contentType: 'application/x-www-form-urlencoded',
            data: { inputSelectedFile: $('#inputSelectedFile').val() },
            success: function(content) {
                $('#divRawDataContainer').html(content);
            },
            error: function(e) { }
        });
    });
});

function updateSourceFileList(){
    var sourceFolderPath = document.getElementById("sourceFolderPath").value;
    var inputFilelist = document.getElementById("uploadSourceFiles");
    var files = inputFilelist.files;
    var inputFilelistDropDown = document.getElementById("fileList");
    inputFilelistDropDown.options.length = 0;
    if(inputFilelist.files.length!=0)
    {
        inputFilelistDropDown.options[inputFilelistDropDown.options.length] = new Option("Select a file", 0);

        // loop through files
        for (var i = 0; i < files.length; i++) {
            var file = files[i];
            inputFilelistDropDown.options[inputFilelistDropDown.options.length] = new Option(sourceFolderPath + file.name, i+1);
        }
    }
    else
    {
        inputFilelistDropDown.options[inputFilelistDropDown.options.length] = new Option("Please provide an input data source", 0);
    }
}

</script>

